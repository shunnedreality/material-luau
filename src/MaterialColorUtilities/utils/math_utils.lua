-- ROBLOX NOTE: no upstream
--[[*
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ]]
local Packages = script.Parent.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
type Array<T> = LuauPolyfill.Array<T>
local exports = {}
-- This file is automatically generated. Do not modify it.
--[[*
 * Utility methods for mathematical operations.
 ]]
--[[*
 * The signum function.
 *
 * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0
 ]]
local function signum(num: number): number
	if
		num
		< 0 --[[ ROBLOX CHECK: operator '<' works only if either both arguments are strings or both are a number ]]
	then
		return -1
	elseif num == 0 then
		return 0
	else
		return 1
	end
end
exports.signum = signum
--[[*
 * The linear interpolation function.
 *
 * @return start if amount = 0 and stop if amount = 1
 ]]
local function lerp(start: number, stop: number, amount: number): number
	return (1.0 - amount) * start + amount * stop
end
exports.lerp = lerp
--[[*
 * Clamps an integer between two integers.
 *
 * @return input when min <= input <= max, and either min or max
 * otherwise.
 ]]
local function clampInt(min: number, max: number, input: number): number
	if
		input
		< min --[[ ROBLOX CHECK: operator '<' works only if either both arguments are strings or both are a number ]]
	then
		return min
	elseif
		input
		> max --[[ ROBLOX CHECK: operator '>' works only if either both arguments are strings or both are a number ]]
	then
		return max
	end
	return input
end
exports.clampInt = clampInt
--[[*
 * Clamps an integer between two floating-point numbers.
 *
 * @return input when min <= input <= max, and either min or max
 * otherwise.
 ]]
local function clampDouble(min: number, max: number, input: number): number
	if
		input
		< min --[[ ROBLOX CHECK: operator '<' works only if either both arguments are strings or both are a number ]]
	then
		return min
	elseif
		input
		> max --[[ ROBLOX CHECK: operator '>' works only if either both arguments are strings or both are a number ]]
	then
		return max
	end
	return input
end
exports.clampDouble = clampDouble
--[[*
 * Sanitizes a degree measure as an integer.
 *
 * @return a degree measure between 0 (inclusive) and 360
 * (exclusive).
 ]]
local function sanitizeDegreesInt(degrees: number): number
	degrees = degrees % 360
	if
		degrees
		< 0 --[[ ROBLOX CHECK: operator '<' works only if either both arguments are strings or both are a number ]]
	then
		degrees = degrees + 360
	end
	return degrees
end
exports.sanitizeDegreesInt = sanitizeDegreesInt
--[[*
 * Sanitizes a degree measure as a floating-point number.
 *
 * @return a degree measure between 0.0 (inclusive) and 360.0
 * (exclusive).
 ]]
local function sanitizeDegreesDouble(degrees: number): number
	degrees = degrees % 360.0
	if
		degrees
		< 0 --[[ ROBLOX CHECK: operator '<' works only if either both arguments are strings or both are a number ]]
	then
		degrees = degrees + 360.0
	end
	return degrees
end
exports.sanitizeDegreesDouble = sanitizeDegreesDouble
--[[*
 * Sign of direction change needed to travel from one angle to
 * another.
 *
 * For angles that are 180 degrees apart from each other, both
 * directions have the same travel distance, so either direction is
 * shortest. The value 1.0 is returned in this case.
 *
 * @param from The angle travel starts from, in degrees.
 * @param to The angle travel ends at, in degrees.
 * @return -1 if decreasing from leads to the shortest travel
 * distance, 1 if increasing from leads to the shortest travel
 * distance.
 ]]
local function rotationDirection(from: number, to: number): number
	local increasingDifference = sanitizeDegreesDouble(to - from)
	return if increasingDifference
			<= 180.0 --[[ ROBLOX CHECK: operator '<=' works only if either both arguments are strings or both are a number ]]
		then 1.0
		else -1.0
end
exports.rotationDirection = rotationDirection
--[[*
 * Distance of two points on a circle, represented using degrees.
 ]]
local function differenceDegrees(a: number, b: number): number
	return 180.0 - math.abs(math.abs(a - b) - 180.0)
end
exports.differenceDegrees = differenceDegrees
--[[*
 * Multiplies a 1x3 row vector with a 3x3 matrix.
 ]]
local function matrixMultiply(row: Array<number>, matrix: Array<Array<number>>): Array<number>
	local a = row[
		1 --[[ ROBLOX adaptation: added 1 to array index ]]
	]
			* matrix[
				1 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				1 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
		+ row[
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
			* matrix[
				1 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
		+ row[
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
			* matrix[
				1 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
	local b = row[
		1 --[[ ROBLOX adaptation: added 1 to array index ]]
	]
			* matrix[
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				1 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
		+ row[
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
			* matrix[
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
		+ row[
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
			* matrix[
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
	local c = row[
		1 --[[ ROBLOX adaptation: added 1 to array index ]]
	]
			* matrix[
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				1 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
		+ row[
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
			* matrix[
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				2 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
		+ row[
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
			* matrix[
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			][
				3 --[[ ROBLOX adaptation: added 1 to array index ]]
			]
	return { a, b, c }
end
exports.matrixMultiply = matrixMultiply
return exports
