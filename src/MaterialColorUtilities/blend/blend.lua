-- ROBLOX NOTE: no upstream
--[[*
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ]]
local Packages = script.Parent.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Array = LuauPolyfill.Array
local exports = {}
-- This file is automatically generated. Do not modify it.
local Cam16 = require(script.Parent.Parent.hct["cam16"]).Cam16
local Hct = require(script.Parent.Parent.hct["hct"]).Hct
local colorUtils = require(script.Parent.Parent.utils["color_utils"])
local mathUtils = require(script.Parent.Parent.utils["math_utils"])
-- material_color_utilities is designed to have a consistent API across
-- platforms and modular components that can be moved around easily. Using a
-- class as a namespace facilitates this.
--
-- tslint:disable:class-as-namespace
--[[*
 * Functions for blending in HCT and CAM16.
 ]]
export type Blend = {}
type Blend_statics = { new: () -> Blend }
local Blend = {} :: Blend & Blend_statics;
(Blend :: any).__index = Blend
function Blend.new(): Blend
	local self = setmetatable({}, Blend)
	return (self :: any) :: Blend
end
function Blend.harmonize(designColor: number, sourceColor: number): number
	local fromHct = Hct.fromInt(designColor)
	local toHct = Hct.fromInt(sourceColor)
	local differenceDegrees = mathUtils:differenceDegrees(fromHct.hue, toHct.hue)
	local rotationDegrees = math.min(differenceDegrees * 0.5, 15.0)
	local outputHue = mathUtils:sanitizeDegreesDouble(
		fromHct.hue + rotationDegrees * mathUtils:rotationDirection(fromHct.hue, toHct.hue)
	)
	return Array
		.from(Hct, outputHue, fromHct.chroma, fromHct.tone) --[[ ROBLOX CHECK: check if 'Hct' is an Array ]]
		:toInt()
end
function Blend.hctHue(from: number, to: number, amount: number): number
	local ucs = Blend:cam16Ucs(from, to, amount)
	local ucsCam = Cam16.fromInt(ucs)
	local fromCam = Cam16.fromInt(from)
	local blended = Array.from(Hct, ucsCam.hue, fromCam.chroma, colorutils.lstarFromArgb(from)) --[[ ROBLOX CHECK: check if 'Hct' is an Array ]]
	return blended:toInt()
end
function Blend.cam16Ucs(from: number, to: number, amount: number): number
	local fromCam = Cam16.fromInt(from)
	local toCam = Cam16.fromInt(to)
	local fromJ = fromCam.jstar
	local fromA = fromCam.astar
	local fromB = fromCam.bstar
	local toJ = toCam.jstar
	local toA = toCam.astar
	local toB = toCam.bstar
	local jstar = fromJ + (toJ - fromJ) * amount
	local astar = fromA + (toA - fromA) * amount
	local bstar = fromB + (toB - fromB) * amount
	return Cam16:fromUcs(jstar, astar, bstar):toInt()
end
exports.Blend = Blend
return exports
