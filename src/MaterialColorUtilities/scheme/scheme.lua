-- ROBLOX NOTE: no upstream
--[[*
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ]]
local Packages = script.Parent.Parent.Parent
local LuauPolyfill = require(Packages.LuauPolyfill)
local Object = LuauPolyfill.Object
local exports = {}
-- This file is automatically generated. Do not modify it.
local CorePalette = require(script.Parent.Parent.palettes["core_palette"]).CorePalette
--[[*
 * DEPRECATED. The `Scheme` class is deprecated in favor of `DynamicScheme`.
 * Please see
 * https://github.com/material-foundation/material-color-utilities/blob/main/make_schemes.md
 * for migration guidance.
 *
 * Represents a Material color scheme, a mapping of color roles to colors.
 ]]
export type Scheme = {
	primary: (self: Scheme) -> number,
	onPrimary: (self: Scheme) -> number,
	primaryContainer: (self: Scheme) -> number,
	onPrimaryContainer: (self: Scheme) -> number,
	secondary: (self: Scheme) -> number,
	onSecondary: (self: Scheme) -> number,
	secondaryContainer: (self: Scheme) -> number,
	onSecondaryContainer: (self: Scheme) -> number,
	tertiary: (self: Scheme) -> number,
	onTertiary: (self: Scheme) -> number,
	tertiaryContainer: (self: Scheme) -> number,
	onTertiaryContainer: (self: Scheme) -> number,
	error_: (self: Scheme) -> number,
	onError: (self: Scheme) -> number,
	errorContainer: (self: Scheme) -> number,
	onErrorContainer: (self: Scheme) -> number,
	background: (self: Scheme) -> number,
	onBackground: (self: Scheme) -> number,
	surface: (self: Scheme) -> number,
	onSurface: (self: Scheme) -> number,
	surfaceVariant: (self: Scheme) -> number,
	onSurfaceVariant: (self: Scheme) -> number,
	outline: (self: Scheme) -> number,
	outlineVariant: (self: Scheme) -> number,
	shadow: (self: Scheme) -> number,
	scrim: (self: Scheme) -> number,
	inverseSurface: (self: Scheme) -> number,
	inverseOnSurface: (self: Scheme) -> number,
	inversePrimary: (self: Scheme) -> number,
	--[[*
   * @param argb ARGB representation of a color.
   * @return Light Material color scheme, based on the color's hue.
   ]]
	toJSON: (self: Scheme) -> any,
}

local function Color3FromARGB(argbInt)
	local r = bit32.rshift(bit32.band(argbInt, 0x00FF0000), 16)
    
    -- Extract green.
    local g = bit32.rshift(bit32.band(argbInt, 0x0000FF00), 8)
    
    -- Extract blue.
    local b = bit32.band(argbInt, 0x000000FF)

    return Color3.fromRGB(r, g, b)
end

type Scheme_private = { --
	-- *** PUBLIC ***
	--
	primary: (self: Scheme_private) -> number,
	onPrimary: (self: Scheme_private) -> number,
	primaryContainer: (self: Scheme_private) -> number,
	onPrimaryContainer: (self: Scheme_private) -> number,
	secondary: (self: Scheme_private) -> number,
	onSecondary: (self: Scheme_private) -> number,
	secondaryContainer: (self: Scheme_private) -> number,
	onSecondaryContainer: (self: Scheme_private) -> number,
	tertiary: (self: Scheme_private) -> number,
	onTertiary: (self: Scheme_private) -> number,
	tertiaryContainer: (self: Scheme_private) -> number,
	onTertiaryContainer: (self: Scheme_private) -> number,
	error_: (self: Scheme_private) -> number,
	onError: (self: Scheme_private) -> number,
	errorContainer: (self: Scheme_private) -> number,
	onErrorContainer: (self: Scheme_private) -> number,
	background: (self: Scheme_private) -> number,
	onBackground: (self: Scheme_private) -> number,
	surface: (self: Scheme_private) -> number,
	onSurface: (self: Scheme_private) -> number,
	surfaceVariant: (self: Scheme_private) -> number,
	onSurfaceVariant: (self: Scheme_private) -> number,
	outline: (self: Scheme_private) -> number,
	outlineVariant: (self: Scheme_private) -> number,
	shadow: (self: Scheme_private) -> number,
	scrim: (self: Scheme_private) -> number,
	inverseSurface: (self: Scheme_private) -> number,
	inverseOnSurface: (self: Scheme_private) -> number,
	inversePrimary: (self: Scheme_private) -> number,
	toJSON: (self: Scheme_private) -> any,
	--
	-- *** PRIVATE ***
	--
	props: {
		primary: number,
		onPrimary: number,
		primaryContainer: number,
		onPrimaryContainer: number,
		secondary: number,
		onSecondary: number,
		secondaryContainer: number,
		onSecondaryContainer: number,
		tertiary: number,
		onTertiary: number,
		tertiaryContainer: number,
		onTertiaryContainer: number,
		error: number,
		onError: number,
		errorContainer: number,
		onErrorContainer: number,
		background: number,
		onBackground: number,
		surface: number,
		onSurface: number,
		surfaceVariant: number,
		onSurfaceVariant: number,
		outline: number,
		outlineVariant: number,
		shadow: number,
		scrim: number,
		inverseSurface: number,
		inverseOnSurface: number,
		inversePrimary: number,
	},
}
type Scheme_statics = {
	new: (
		props: {
			primary: number,
			onPrimary: number,
			primaryContainer: number,
			onPrimaryContainer: number,
			secondary: number,
			onSecondary: number,
			secondaryContainer: number,
			onSecondaryContainer: number,
			tertiary: number,
			onTertiary: number,
			tertiaryContainer: number,
			onTertiaryContainer: number,
			error: number,
			onError: number,
			errorContainer: number,
			onErrorContainer: number,
			background: number,
			onBackground: number,
			surface: number,
			onSurface: number,
			surfaceVariant: number,
			onSurfaceVariant: number,
			outline: number,
			outlineVariant: number,
			shadow: number,
			scrim: number,
			inverseSurface: number,
			inverseOnSurface: number,
			inversePrimary: number,
		}
	) -> Scheme,
}
local Scheme = {} :: Scheme & Scheme_statics
local Scheme_private = Scheme :: Scheme_private & Scheme_statics;
(Scheme :: any).__index = Scheme
function Scheme_private.new(props: {
	primary: number,
	onPrimary: number,
	primaryContainer: number,
	onPrimaryContainer: number,
	secondary: number,
	onSecondary: number,
	secondaryContainer: number,
	onSecondaryContainer: number,
	tertiary: number,
	onTertiary: number,
	tertiaryContainer: number,
	onTertiaryContainer: number,
	error: number,
	onError: number,
	errorContainer: number,
	onErrorContainer: number,
	background: number,
	onBackground: number,
	surface: number,
	onSurface: number,
	surfaceVariant: number,
	onSurfaceVariant: number,
	outline: number,
	outlineVariant: number,
	shadow: number,
	scrim: number,
	inverseSurface: number,
	inverseOnSurface: number,
	inversePrimary: number,
}): Scheme
	local self = setmetatable({}, Scheme)
	self.props = props
	return (self :: any) :: Scheme
end
function Scheme_private:primary(): number
	return self.props.primary
end
function Scheme_private:onPrimary(): number
	return self.props.onPrimary
end
function Scheme_private:primaryContainer(): number
	return self.props.primaryContainer
end
function Scheme_private:onPrimaryContainer(): number
	return self.props.onPrimaryContainer
end
function Scheme_private:secondary(): number
	return self.props.secondary
end
function Scheme_private:onSecondary(): number
	return self.props.onSecondary
end
function Scheme_private:secondaryContainer(): number
	return self.props.secondaryContainer
end
function Scheme_private:onSecondaryContainer(): number
	return self.props.onSecondaryContainer
end
function Scheme_private:tertiary(): number
	return self.props.tertiary
end
function Scheme_private:onTertiary(): number
	return self.props.onTertiary
end
function Scheme_private:tertiaryContainer(): number
	return self.props.tertiaryContainer
end
function Scheme_private:onTertiaryContainer(): number
	return self.props.onTertiaryContainer
end
function Scheme_private:error_(): number
	return self.props.error
end
function Scheme_private:onError(): number
	return self.props.onError
end
function Scheme_private:errorContainer(): number
	return self.props.errorContainer
end
function Scheme_private:onErrorContainer(): number
	return self.props.onErrorContainer
end
function Scheme_private:background(): number
	return self.props.background
end
function Scheme_private:onBackground(): number
	return self.props.onBackground
end
function Scheme_private:surface(): number
	return self.props.surface
end
function Scheme_private:onSurface(): number
	return self.props.onSurface
end
function Scheme_private:surfaceVariant(): number
	return self.props.surfaceVariant
end
function Scheme_private:onSurfaceVariant(): number
	return self.props.onSurfaceVariant
end
function Scheme_private:outline(): number
	return self.props.outline
end
function Scheme_private:outlineVariant(): number
	return self.props.outlineVariant
end
function Scheme_private:shadow(): number
	return self.props.shadow
end
function Scheme_private:scrim(): number
	return self.props.scrim
end
function Scheme_private:inverseSurface(): number
	return self.props.inverseSurface
end
function Scheme_private:inverseOnSurface(): number
	return self.props.inverseOnSurface
end
function Scheme_private:inversePrimary(): number
	return self.props.inversePrimary
end
function Scheme_private.light(argb: number): Scheme
	return Scheme.lightFromCorePalette(CorePalette.of(argb))
end
function Scheme_private.dark(argb: number): Scheme
	return Scheme.darkFromCorePalette(CorePalette.of(argb))
end
function Scheme_private.lightContent(argb: number): Scheme
	return Scheme.lightFromCorePalette(CorePalette:contentOf(argb))
end
function Scheme_private.darkContent(argb: number): Scheme
	return Scheme.darkFromCorePalette(CorePalette:contentOf(argb))
end
function Scheme_private.lightFromCorePalette(core: CorePalette): Scheme
	return Scheme.new({
		primary = Color3FromARGB(core.a1:tone(40)),
		onPrimary = Color3FromARGB(core.a1:tone(100)),
		primaryContainer = Color3FromARGB(core.a1:tone(90)),
		onPrimaryContainer = Color3FromARGB(core.a1:tone(10)),
		secondary = Color3FromARGB(core.a2:tone(40)),
		onSecondary = Color3FromARGB(core.a2:tone(100)),
		secondaryContainer = Color3FromARGB(core.a2:tone(90)),
		onSecondaryContainer = Color3FromARGB(core.a2:tone(10)),
		tertiary = Color3FromARGB(core.a3:tone(40)),
		onTertiary = Color3FromARGB(core.a3:tone(100)),
		tertiaryContainer = Color3FromARGB(core.a3:tone(90)),
		onTertiaryContainer = Color3FromARGB(core.a3:tone(10)),
		error = Color3FromARGB(core.error:tone(40)),
		onError = Color3FromARGB(core.error:tone(100)),
		errorContainer = Color3FromARGB(core.error:tone(90)),
		onErrorContainer = Color3FromARGB(core.error:tone(10)),
		background = Color3FromARGB(core.n1:tone(99)),
		onBackground = Color3FromARGB(core.n1:tone(10)),
		surface = Color3FromARGB(core.n1:tone(99)),
		onSurface = Color3FromARGB(core.n1:tone(10)),
		surfaceVariant = Color3FromARGB(core.n2:tone(90)),
		onSurfaceVariant = Color3FromARGB(core.n2:tone(30)),
		outline = Color3FromARGB(core.n2:tone(50)),
		outlineVariant = Color3FromARGB(core.n2:tone(80)),
		shadow = Color3FromARGB(core.n1:tone(0)),
		scrim = Color3FromARGB(core.n1:tone(0)),
		inverseSurface = Color3FromARGB(core.n1:tone(20)),
		inverseOnSurface = Color3FromARGB(core.n1:tone(95)),
		inversePrimary = Color3FromARGB(core.a1:tone(80)),
		surfaceContainerLow = Color3FromARGB(core.n1:tone(96)),
		surfaceContainer = Color3FromARGB(core.n1:tone(94)),
		surfaceContainerHigh = Color3FromARGB(core.n1:tone(92)),
		surfaceContainerHighest = Color3FromARGB(core.n1:tone(90))
	})
end
function Scheme_private.darkFromCorePalette(core: CorePalette): Scheme
	return Scheme.new({
        primary = Color3FromARGB(core.a1:tone(80)),
        onPrimary = Color3FromARGB(core.a1:tone(20)),
        primaryContainer = Color3FromARGB(core.a1:tone(30)),
        onPrimaryContainer = Color3FromARGB(core.a1:tone(90)),
        secondary = Color3FromARGB(core.a2:tone(80)),
        onSecondary = Color3FromARGB(core.a2:tone(20)),
        secondaryContainer = Color3FromARGB(core.a2:tone(30)),
        onSecondaryContainer = Color3FromARGB(core.a2:tone(90)),
        tertiary = Color3FromARGB(core.a3:tone(80)),
        onTertiary = Color3FromARGB(core.a3:tone(20)),
        tertiaryContainer = Color3FromARGB(core.a3:tone(30)),
        onTertiaryContainer = Color3FromARGB(core.a3:tone(90)),
        error = Color3FromARGB(core.error:tone(80)),
        onError = Color3FromARGB(core.error:tone(20)),
        errorContainer = Color3FromARGB(core.error:tone(30)),
        onErrorContainer = Color3FromARGB(core.error:tone(80)),
        background = Color3FromARGB(core.n1:tone(10)),
        onBackground = Color3FromARGB(core.n1:tone(90)),
        surface = Color3FromARGB(core.n1:tone(10)),
        onSurface = Color3FromARGB(core.n1:tone(90)),
        surfaceVariant = Color3FromARGB(core.n2:tone(30)),
        onSurfaceVariant = Color3FromARGB(core.n2:tone(80)),
        outline = Color3FromARGB(core.n2:tone(60)),
        outlineVariant = Color3FromARGB(core.n2:tone(30)),
        shadow = Color3FromARGB(core.n1:tone(0)),
        scrim = Color3FromARGB(core.n1:tone(0)),
        inverseSurface = Color3FromARGB(core.n1:tone(90)),
        inverseOnSurface = Color3FromARGB(core.n1:tone(20)),
        inversePrimary = Color3FromARGB(core.a1:tone(40)),
		surfaceContainerLowest = Color3FromARGB(core.n1:tone(0)),
		surfaceContainerLow = Color3FromARGB(core.n1:tone(6)),
		surfaceContainer = Color3FromARGB(core.n1:tone(9)),
		surfaceContainerHigh = Color3FromARGB(core.n1:tone(12)),
		surfaceContainerHighest = Color3FromARGB(core.n1:tone(15))
    })
end
function Scheme_private:toJSON()
	return Object.assign({}, self.props)
end
exports.Scheme = Scheme
return exports
